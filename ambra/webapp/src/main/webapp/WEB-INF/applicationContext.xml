<?xml version="1.0" encoding="UTF-8"?>
<!--
  $HeadURL$
  $Id$

  Copyright (c) 2006-2010 by Public Library of Science
  http://plos.org
  http://ambraproject.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans default-autowire="byName"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- Set up XML factories -->
  <bean id="documentBuilderFactory" class="org.topazproject.ambra.util.DocumentBuilderFactoryCreator"
        factory-method="createFactory"/>

  <!--Ambra developer beans here -->
  <bean id="configurationStore" class="org.topazproject.ambra.configuration.ConfigurationStore"
        factory-method="getInstance"/>
  <bean id="ambraConfiguration" factory-bean="configurationStore" factory-method="getConfiguration"/>

  <bean id="fetchArticleService" class="org.topazproject.ambra.article.service.FetchArticleServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="articleService" ref="articlePersistenceService"/>
  </bean>

  <bean id="trackBackService" class="org.topazproject.ambra.annotation.service.TrackbackServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="articleTransformService" class="org.topazproject.ambra.service.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslTemplate" value="/articleTransform.xsl"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <bean id="xmlService" class="org.topazproject.ambra.service.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslTemplate" value="/fullDOI.xsl"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <bean id="secondaryObjectService" class="org.topazproject.ambra.service.XMLServiceImpl" init-method="init">
    <property name="articleRep" value="XML"/>
    <property name="xslTemplate" value="/objInfo.xsl"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="xmlFactoryProperty" ref="xmlFactoryProperties"/>
  </bean>

  <util:map id="xmlFactoryProperties">
    <entry key="javax.xml.transform.TransformerFactory"
           value="net.sf.saxon.TransformerFactoryImpl"/>
    <entry key="javax.xml.transform.Transformer"
           value="net.sf.saxon.Controller"/>
  </util:map>

  <!-- TODO: Update the servicePort url's automatically using maven build process itself-->
  <bean id="articlePersistenceService" class="org.topazproject.ambra.article.service.ArticlePersistenceServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="smallImageRep" value="PNG_S"/>
    <property name="mediumImageRep" value="PNG_M"/>
    <property name="largeImageRep" value="PNG_L"/>
    <property name="fileStoreService" ref="fileStoreService" />
  </bean>

  <bean id="feedService" class="org.topazproject.ambra.feed.service.FeedServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="articlePersistenceService" ref="articlePersistenceService"/>
    <property name="annotationService" ref="annotationService"/>
    <property name="journalService" ref="journalService"/>
    <property name="feedCache" ref="feedCache"/>
    <property name="solrHttpService" ref="solrHttpService"/>
    <property name="browseService" ref="browseService"/>
    <property name="configuration" ref="ambraConfiguration" />
    <property name="solrFieldConverter" ref="solrFieldConverter" />
  </bean>

  <bean id="adminService" class="org.topazproject.ambra.admin.service.impl.AdminServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="journalService" ref="journalService"/>
    <property name="onCrossPubListener">
      <list>
        <ref bean="articleIndexingService"/>
      </list>
    </property>
  </bean>

  <bean id="ingestArchiveProcessor" class="org.topazproject.ambra.article.service.XslIngestArchiveProcessor">
    <property name="documentBuilder" ref="documentBuilder"/>
    <property name="xslStyleSheet" value="${ambra.services.ingest.xsl}"/>
    <property name="configuration" ref="ambraConfiguration"/>
  </bean>
  <bean id="documentBuilder" class="javax.xml.parsers.DocumentBuilder" factory-bean="documentBuilderFactory"
        factory-method="newDocumentBuilder"/>

  <bean id="hibernateEntityUtil" class="org.topazproject.ambra.util.HibernateEntityUtil">
    <constructor-arg index="0">
      <bean class="java.util.Map" factory-bean="hibernateSessionFactory" factory-method="getAllClassMetadata" />
    </constructor-arg>
  </bean>

  <bean id="ingester" class="org.topazproject.ambra.article.service.HibernateIngesterImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="ingestArchiveProcessor" ref="ingestArchiveProcessor"/>
    <property name="entityUtil" ref="hibernateEntityUtil"/>
    <property name="fileStoreService" ref="fileStoreService" />
  </bean>

  <bean id="crossRefPosterService" class="org.topazproject.ambra.admin.service.impl.CrossRefPosterServiceImp">
    <!-- following is the URL for the CrossRef service. The three parameters which should be set are
        * area=  test or live. Decides if the cross ref is actually 'posted'. area=test for testing, area=live for deployment
        * login_id=crossref user name
        * login_passwd=crossref user password
    -->
    <property name="doiXrefUrl" value="${ambra.services.crossref.post.url}"/>
  </bean>

  <bean id="httpConnectionManagerParams" class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
    <!-- time out after 30 sec -->
    <property name="soTimeout" value="30000"/>
    <property name="connectionTimeout" value="30000"/>
  </bean>

  <bean id="multiThreadedHttpConnectionManager"
        class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
    <property name="params" ref="httpConnectionManagerParams"/>
  </bean>

  <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
    <constructor-arg index="0" ref="multiThreadedHttpConnectionManager"/>
  </bean>

  <bean id="crossRefLookupService" class="org.topazproject.ambra.crossref.CrossRefLookupServiceImpl">
    <property name="httpClient" ref="httpClient"/>
    <property name="crossRefUrl" value="${ambra.services.crossref.query.url}"/>
  </bean>

  <bean id="pubGetLookupService" class="org.topazproject.ambra.pubget.PubGetLookupServiceImpl">
    <property name="httpClient" ref="httpClient"/>
    <property name="pubGetUrl" value="${ambra.services.pubget.url}"/>
  </bean>

  <bean id="findArticleService" class="org.topazproject.ambra.article.service.FindArticleServiceImpl">
    <property name="crossRefLookupService" ref="crossRefLookupService"/>
    <property name="pubGetLookupService" ref="pubGetLookupService"/>
  </bean>

  <bean id="flagManagementService" class="org.topazproject.ambra.admin.service.impl.FlagManagementServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="documentManagementService"
        class="org.topazproject.ambra.admin.service.impl.DocumentManagementServiceImpl">
    <property name="articlePersistenceService" ref="articlePersistenceService"/>
    <property name="journalService" ref="journalService"/>
    <!-- These pathnames are absolute -->
    <property name="documentDirectory"
              value="${ambra.services.documentManagement.ingestSourceDir}"/>
    <property name="ingestedDocumentDirectory"
              value="${ambra.services.documentManagement.ingestDestinationDir}"/>
    <property name="documentPrefix" value="${ambra.services.documentManagement.documentPrefix}"/>
    <!-- Whereas this is relative to webapp/src/main/resources  -->
    <property name="plosDoiUrl" value="${ambra.services.crossref.plos.doiurl}"/>
    <property name="plosEmail" value="${ambra.services.crossref.plos.email}"/>
    <property name="permissionsService" ref="permissionsService" />
    <property name="fileStoreService" ref="fileStoreService"/>
    <property name="onPublishListeners">
      <list>
        <ref bean="articleIndexingService"/>
      </list>
    </property>
    <property name="onDeleteListeners">
      <list>
        <ref bean="articleIndexingService"/>
      </list>
    </property>
    <property name="crossrefXslTemplate" value="${ambra.services.crossref.xsl}"/>
  </bean>

  <!-- Warning. Spring does not autowire 'simple' properties like primitives, Strings and Classes -->
  <bean id="defaultEncodingCharset" class="java.lang.String">
    <constructor-arg value="UTF-8"/>
  </bean>

  <bean id="applicationId" class="java.lang.String">
    <constructor-arg value="topaz-ambra"/>
  </bean>

  <bean id="permissionsService" class="org.topazproject.ambra.permission.service.PermissionsServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="annotationConverter" class="org.topazproject.ambra.annotation.service.AnnotationConverterImpl"/>

  <bean id="replyService" class="org.topazproject.ambra.annotation.service.ReplyServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="encodingCharset" ref="defaultEncodingCharset"/>
    <property name="defaultType" value="http://www.w3.org/2001/12/replyType#Comment"/>
    <property name="applicationId" ref="applicationId"/>
  </bean>


  <!--For DEV setup, uncomment the FileSystemImpl bean and comment out the mogile bean to use your local file store.
      Also remember to set the base directory for the local file store (the first argument)
  -->

  <bean id="fileStoreService" class="org.plos.filestore.impl.FileSystemImpl">
    <constructor-arg index="0">
      <bean class="java.io.File">
        <constructor-arg index="0" value="${ambra.services.filestore.basedir}" />
      </bean>
    </constructor-arg>
    <constructor-arg index="1" value="ambra"/>
  </bean>

<!--
  <bean id="fileStoreService" class="org.plos.filestore.impl.MogileFSImpl">
    <constructor-arg index="0" value="${ambra.services.mogile.domain}" />
    <constructor-arg index="1" value="${ambra.services.mogile.trackers}" />
    <constructor-arg index="2" value="${ambra.services.mogile.maxTrackerConnections}"/>
    <constructor-arg index="3" value="${ambra.services.mogile.maxIdleConnections}"/>
    <constructor-arg index="4" value="${ambra.services.mogile.maxIdleTimeMillis}"/>
  </bean>
-->

  <bean id="annotationService" class="org.topazproject.ambra.annotation.service.AnnotationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="encodingCharset" ref="defaultEncodingCharset"/>
    <property name="applicationId" ref="applicationId"/>
  </bean>

  <bean id="cacheService" class="org.topazproject.ambra.admin.service.impl.CacheServiceImpl"/>

  <bean id="citationService" class="org.topazproject.ambra.admin.service.impl.CitationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="ratingsService" class="org.topazproject.ambra.rating.service.RatingsServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="applicationId" ref="applicationId"/>
  </bean>

  <bean id="userService" class="org.topazproject.ambra.user.service.UserServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="emailAddressUrl" value="${ambra.services.cas.url.base}/email?guid="/>
    <property name="applicationId" ref="applicationId"/>
  </bean>

  <bean id="profanityCheckingService" class="org.topazproject.ambra.util.ProfanityCheckingServiceImpl"/>

  <bean id="browseService" class="org.topazproject.ambra.article.service.BrowseServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="journalService" ref="journalService"/>
    <property name="browseSolrCache" ref="browseSolrCache"/>
    <property name="serverFactory" ref="solrServerFactory"/>
    <property name="articlePersistenceService" ref="articlePersistenceService" />
    <!--property name="sessionFactory" ref="hibernateSessionFactory"/-->
  </bean>

  <!-- Add all your constants to the map with a key and a value/ref -->
  <!-- TODO: Does this get used? -->
  <util:map id="otherConstants" map-class="java.util.HashMap">
    <entry key="countries" value-ref="countries"/>
  </util:map>

  <bean id="solrServerFactory" class="org.topazproject.ambra.search.service.SolrServerFactory">
    <constructor-arg ref="ambraConfiguration"/>
  </bean>

  <bean id="searchService2" class="org.topazproject.ambra.search.service.SolrSearchService">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="serverFactory" ref="solrServerFactory"/>
  </bean>

  <bean id="journalCreator" class="org.topazproject.ambra.journal.JournalCreatorImpl"
        init-method="createJournals">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="journalService" class="org.topazproject.ambra.journal.JournalServiceImpl"
        depends-on="journalCreator">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="bootstrapMigrator" class="org.topazproject.ambra.migration.AmbraBootstrapMigrator"
        init-method="migrate"/>

  <!-- hibernate settings -->
  <!-- comment below if you are deploying in Tomcat: -->
  <bean id="hibernateDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${ambra.services.database.driver}"/>
    <property name="url" value="${ambra.services.database.url}"/>
    <property name="username" value="${ambra.services.database.username}"/>
    <property name="password" value="${ambra.services.database.password}"/>
    <property name="validationQuery" value="select 1"/>
    <property name="testOnBorrow" value="true"/>
  </bean>

  <!-- uncomment if you are deploying in Tomcat: -->
  <!--
  <bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/AmbraDS"/>
  </bean>
  -->

  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="hibernateDataSource"/>
  </bean>

  <!--Transactions are managed by the TransactionInterceptor-->
  <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->

  <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="hibernateDataSource"/>
    <!--property name="useTransactionAwareDataSource" value="true"/>
    <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" /-->
    <property name="mappingLocations">
      <list>
        <value>WEB-INF/hibernateMappings/DublinCore.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/CustomTypes.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/Article.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/ObjectInfo.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/RelatedArticle.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/Category.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/License.hbm.xml</value>

        <value>WEB-INF/hibernateMappings/UserProfile.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/UserAccount.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/UserRole.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/UserPreferences.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/UserPreference.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/AuthenticationId.hbm.xml</value>

        <value>WEB-INF/hibernateMappings/Citation.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/Representation.hbm.xml</value>

        <value>WEB-INF/hibernateMappings/Annotation.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/ByteArrayBlob.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/RatingContent.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/TrackbackContent.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/RatingSummaryContent.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/Reply.hbm.xml</value>

        <value>WEB-INF/hibernateMappings/Syndication.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/Aggregations.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/EditorialBoard.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/CitedPerson.hbm.xml</value>
        <value>WEB-INF/hibernateMappings/ArticleContributor.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <!-- We might use MySQLInnoDBDialect instead -->
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="c3p0.max_size">50</prop>
        <prop key="c3p0.min_size">10</prop>
      </props>
    </property>
  </bean>

  <!-- end hibernate settings -->

  <bean id="browseSolrCache" class="org.topazproject.ambra.cache.EhcacheProvider">
    <constructor-arg index="0" ref="browseSolrEhcache"/>
    <constructor-arg index="1" value="false"/>
  </bean>
  <bean id="feedCache" class="org.topazproject.ambra.cache.EhcacheProvider">
    <constructor-arg index="0" ref="feedEhcache"/>
  </bean>
  <bean id="articleAnnotationCache" class="org.topazproject.ambra.cache.EhcacheProvider">
    <constructor-arg index="0" ref="articleAnnotationEhcache"/>
  </bean>

  <!-- freemarker configs -->
  <bean id="ambraFreemarkerConfig" class="org.topazproject.ambra.struts2.AmbraFreemarkerConfig">
    <constructor-arg index="0" ref="ambraConfiguration"/>
  </bean>

  <bean id="ambraFreemarkerManager" class="org.topazproject.ambra.struts2.AmbraFreemarkerManager"/>

  <!-- Caches -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:ehcache.xml"/>
    <property name="shared" value="true"/>
  </bean>

  <bean id="browseSolrEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="BrowseSolrCache"/>
  </bean>

  <bean id="feedEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="FeedCache"/>
  </bean>

  <bean id="articleAnnotationEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="ArticleAnnotationCache"/>
  </bean>

  <!-- JMX exporting -->
  <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
    <property name="locateExistingServerIfPossible" value="true"/>
  </bean>

  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod"
              value="net.sf.ehcache.management.ManagementService.registerMBeans"/>
    <property name="arguments">
      <list>
        <ref bean="cacheManager"/>
        <ref bean="mbeanServer"/>
        <value>true</value>
        <value>true</value>
        <value>true</value>
        <value>true</value>
      </list>
    </property>
  </bean>

  <bean class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
    <property name="autodetect" value="true"/>
  </bean>

  <bean name="org.topazproject.ambra.logging:name=log4j" class="org.apache.log4j.jmx.HierarchyDynamicMBean"/>

  <!-- email configuration -->
  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="${ambra.network.hosts.mailhost}"/>
  </bean>

  <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
    <property name="templateLoaderPath" value="/WEB-INF/emailTemplates/"/>
    <property name="defaultEncoding" ref="defaultEncodingCharset"/>
  </bean>

  <!--For Dev setup, you can uncomment the dummy mailer and comment out the real mailer-->
  <!--<bean id="ambraMailer" class="org.topazproject.ambra.service.DummyAmbraMailer" />-->

  <bean id="ambraMailer" class="org.topazproject.ambra.service.AmbraMailerImpl">
    <property name="fromEmailAddress" value="application@plosone.org"/>
    <property name="feedbackEmailMap">
      <map>
        <entry key="text" value="feedback-text.ftl"/>
        <entry key="html" value="feedback-html.ftl"/>
        <entry key="subject" value="My feedback for PLoS ONE"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.feedback}"/>
      </map>
    </property>
    <property name="emailThisArticleMap">
      <map>
        <entry key="text" value="emailThisArticle-text.ftl"/>
        <entry key="html" value="emailThisArticle-html.ftl"/>
        <entry key="url" value="${ambra.services.crossref.plos.doiurl}"/>
        <entry key="subject" value="An Article from "/>
      </map>
    </property>
    <property name="autoIngestEmailMap">
      <map>
        <entry key="text" value="emailAutoIngest-text.ftl"/>
        <entry key="html" value="emailAutoIngest-html.ftl"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.autoingest}"/>
        <entry key="subject" value="Auto Ingest Results "/>
      </map>
    </property>
    <property name="errorEmailMap">
      <map>
        <entry key="text" value="emailError-text.ftl"/>
        <entry key="html" value="emailError-html.ftl"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.errors}"/>
        <entry key="subject" value="An ambra error has occured"/>
      </map>
    </property>
  </bean>

  <!-- setup JMS connection factory -->
  <bean id="jmsConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${ambra.services.activemq}"/>
  </bean>

  <!-- setup spring jms TX manager -->
  <bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
  </bean>

  <!-- define Camel activemq component -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
    <!-- define the jms consumer/producer as transacted -->
    <property name="transacted" value="true"/>
    <!-- setup the transaction manager to use -->
    <property name="transactionManager" ref="jmsTransactionManager"/>
    <!-- If connection is not available try to reconnect every 10sec -->
    <property name="recoveryInterval" value="10000"/>
    <!-- Timeout on receiving messages after 5 sec  -->
    <property name="receiveTimeout" value="5000"/>
  </bean>

  <!-- JMS transaction policy -->
  <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jmsTransactionManager"/>
  </bean>

  <bean id="syndicationService" class="org.topazproject.ambra.admin.service.impl.SyndicationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="messageService" ref="messageService"/>
  </bean>

  <bean id="pmcResponseConsumer" class="org.topazproject.ambra.queue.PMCResponseConsumer">
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <bean id="crossrefResponseConsumer" class="org.topazproject.ambra.queue.CrossrefResponseConsumer">
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <bean id="edepotResponseConsumer" class="org.topazproject.ambra.queue.EdepotResponseConsumer">
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <bean id="articleDocumentService" class="org.topazproject.ambra.article.service.ArticleDocumentServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="documentBuilderFactory" ref="documentBuilderFactory"/>
    <property name="fileStoreService" ref="fileStoreService" />
    <property name="journalService" ref="journalService"/>
  </bean>


  <bean id="articleIndexingService" class="org.topazproject.ambra.search.service.ArticleIndexingServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="articleDocumentService" ref="articleDocumentService"/>
    <property name="messageSender" ref="messageSender"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
  </bean>

  <bean id="shutdownStrategy" class="org.apache.camel.impl.DefaultShutdownStrategy">
    <property name="timeout" value="20"/>
    <!-- Wait 20 sec -->
    <property name="timeUnit">
      <util:constant static-field="java.util.concurrent.TimeUnit.SECONDS"/>
    </property>
  </bean>

  <!--
  routeBuilder automatically binds beans with name <target_lowercase>ResponseConsumer to appropriate response
  queues from configuration
  -->
  <bean id="routeBuilder" class="org.topazproject.ambra.queue.Routes"
        depends-on="pmcResponseConsumer, activemq, PROPAGATION_REQUIRED, articleIndexingService, shutdownStrategy">
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <!-- property name="redeliveryInterval" value="10"/ -->
  </bean>

  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <jmxAgent id="plos-queue" createConnector="false"/>
    <template id="messageProducerTemplate"/>
    <routeBuilder ref="routeBuilder"/>
  </camelContext>

  <bean id="messageSender" class="org.topazproject.ambra.queue.CamelSender">
    <property name="producerTemplate" ref="messageProducerTemplate"/>
  </bean>

  <bean id="messageService" class="org.topazproject.ambra.queue.MessageServiceImpl">
    <property name="sender" ref="messageSender"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
  </bean>
  <bean id="solrHttpService" class="org.topazproject.ambra.solr.SolrHttpServiceImpl">
    <property name="config" ref="ambraConfiguration"/>
  </bean>

  <bean id="mostViewedArticleService" class="org.topazproject.ambra.solr.SolrMostViewedArticleService">
    <property name="solrFieldConverter" ref="solrFieldConverter"/>
    <property name="solrHttpService" ref="solrHttpService"/>
  </bean>


  <bean id="solrFieldConverter" class="org.topazproject.ambra.solr.SolrFieldConversionImpl">
    <property name="allTimeViewsField" value="counter_total_all"/>
    <property name="viewCountingFields">
      <map>
        <entry key="30" value="counter_total_month"/>
      </map>
    </property>
  </bean>
</beans>
